import pandas as pd
from sklearn.preprocessing import LabelEncoder
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import accuracy_score, classification_report
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV



# Load the dataset
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
columns = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species']
data = pd.read_csv(url, header=None, names=columns)

# Display the first few rows
print(data.head())

# Check for missing values
print(data.isnull().sum())

# Encode the target variable
#from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()
data['species'] = label_encoder.fit_transform(data['species'])

#import seaborn as sns
#import matplotlib.pyplot as plt

# Pair plot
sns.pairplot(data, hue='species')
plt.show()

# Correlation heatmap
plt.figure(figsize=(10, 6))
correlation_matrix = data.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.show()

#from sklearn.model_selection import train_test_split

# Define features and target variable
X = data.drop(columns=['species'])
y = data['species']

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


#from sklearn.neighbors import KNeighborsClassifier

# Initialize the model
knn = KNeighborsClassifier(n_neighbors=3)
# Train the model
knn.fit(X_train, y_train)


#from sklearn.model_selection import GridSearchCV

# Define parameter grid
param_grid = {'n_neighbors': [3, 5, 7, 9, 11]}

# Initialize Grid Search
grid_search = GridSearchCV(knn, param_grid, cv=5)

# Perform Grid Search
grid_search.fit(X_train, y_train)


#from sklearn.metrics import accuracy_score, classification_report

# Make predictions
y_pred = grid_search.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)
print(f'Accuracy: {accuracy}')
print(f'Classification Report:\n{report}')


# from sklearn.svm import SVC
# from sklearn.model_selection import GridSearchCV

# # Define parameter grid
# param_grid = {
#     'C': [0.1, 1, 10, 100],
#     'gamma': [1, 0.1, 0.01, 0.001],
#     'kernel': ['rbf', 'poly', 'sigmoid']
# }

# # Initialize Grid Search
# grid_search = GridSearchCV(SVC(), param_grid, refit=True, verbose=2, cv=5)

# # Perform Grid Search
# grid_search.fit(X_train, y_train)

# # Best parameters and best model
# print("Best Parameters:", grid_search.best_params_)
# print("Best Model:", grid_search.best_estimator_)

# # Evaluate the best model
# y_pred = grid_search.best_estimator_.predict(X_test)
# accuracy = accuracy_score(y_test, y_pred)
# report = classification_report(y_test, y_pred)
# print(f'Accuracy: {accuracy}')
# print(f'Classification Report:\n{report}')

# import joblib

# # Save the model
# joblib.dump(grid_search, 'iris_classification_model.pkl')

# # Load the model
# model = joblib.load('iris_classification_model.pkl')
